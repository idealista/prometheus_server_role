---

- name: PROMETHEUS | Copy environment file
  template:
    src: "{{ prometheus_environment_template_path }}"
    dest: /etc/default/prometheus
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: 0640
  notify: restart prometheus

- name: PROMETHEUS | Copy rules
  template:
    src: "{{ item }}"
    dest: "{{ prometheus_tmp_path }}/rules/{{ item | basename }}"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: 0640
    variable_start_string: "{{ prometheus_rule_templates_variable_start }}"
    variable_end_string: "{{ prometheus_rule_templates_variable_end }}"
    block_start_string: "{{ prometheus_rule_templates_block_start }}"
    block_end_string: "{{ prometheus_rule_templates_block_end }}"
  with_fileglob:
    - "{{ prometheus_rules_templates_path }}/*"

- name: PROMETHEUS | Find rules
  find:
    paths: "{{ prometheus_tmp_path }}/rules"
    file_type: file
  register: tmp_rules

- name: PROMETHEUS | Validate rules
  command: "promtool {{ prometheus_promtool_check_rules }} {{ item.path }}"
  changed_when: false
  loop: "{{ tmp_rules.files }}"
  when: prometheus_rules_validation

- name: PROMETHEUS | Load rules
  copy:
    src: "{{ item.path }}"
    dest: "{{ prometheus_conf_path }}/rules/{{ item.path | basename }}"
    remote_src: yes
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: 0640
  notify: restart prometheus
  loop: "{{ tmp_rules.files }}"

- name: PROMETHEUS | Set new rules var
  set_fact:
    new_rules: "{{ tmp_rules.files | map(attribute='path') | map('basename') | list }}"

- name: PROMETHEUS | List all rules in path
  find:
    paths: "{{ prometheus_conf_path }}/rules"
    file_type: file
  register: all_rules

- name: PROMETHEUS | Remove old rules
  file:
    path: "{{ prometheus_conf_path }}/rules/{{ item }}"
    state: absent
  with_items:
    - "{{ all_rules.files | map(attribute='path') | map('basename') | list | difference(new_rules) }}"

- name: PROMETHEUS | Set rules loaded var
  find:
    paths: "{{ prometheus_rules_templates_path }}"
    file_type: file
  delegate_to: localhost
  become: no
  register: rules_loaded

- name: PROMETHEUS | Set rules templates var
  set_fact:
    prometheus_rules_templates: "{{ rules_loaded.files | map(attribute='path') | map('basename') | list }}"

- name: PROMETHEUS | Copy server config (global)
  template:
    src: "{{ prometheus_global_config_template_path }}"
    dest: "{{ prometheus_tmp_path }}/parts/1_global_prometheus"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: 0640

- name: PROMETHEUS | Load scrape vars
  include_vars:
    file: "{{ item }}"
    name: "{{ item | basename | splitext | first }}"
  with_fileglob:
    - "{{ prometheus_config_vars_templates_path }}/*"

- name: PROMETHEUS | Copy scrapes
  template:
    src: "{{ item }}"
    dest: "{{ prometheus_tmp_path }}/parts/2_{{ item | basename | splitext | first }}"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: 0640
  with_fileglob:
    - "{{ prometheus_config_scrapes_templates_path }}/*"

- name: PROMETHEUS | Set scrapes loaded var
  find:
    paths: "{{ prometheus_config_scrapes_templates_path }}"
    file_type: file
  delegate_to: localhost
  become: no
  register: scrapes_loaded

- name: PROMETHEUS | Set scrapes templates var
  set_fact:
    prometheus_scrapes_templates: "{{ scrapes_loaded.files | map(attribute='path') | map('basename') | map('splitext') | map('first') | map('regex_replace', '^(.*)$', '2_\\1') |  list | union(['1_global_prometheus']) }}"

- name: PROMETHEUS | List all scrapes in path
  find:
    paths: "{{ prometheus_conf_path }}/parts"
    file_type: file
  register: all_scrapes

- name: PROMETHEUS | Join config parts
  assemble:
    remote_src: true
    src: "{{ prometheus_tmp_path }}/parts"
    dest: "{{ prometheus_tmp_path }}/prometheus.yml"
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: 0640
    delimiter: '\n'

- name: PROMETHEUS | Validate config
  command: "promtool {{ prometheus_promtool_check_config }} {{ prometheus_tmp_path }}/prometheus.yml"
  changed_when: false
  when: prometheus_config_validation

- name: PROMETHEUS | Remove old scrapes
  file:
    path: "{{ prometheus_conf_path }}/parts/{{ item }}"
    state: absent
  with_items:
    - "{{ all_scrapes.files | map(attribute='path') | map('basename') | map('splitext') | map('first') | list | difference(prometheus_scrapes_templates) }}"

- name: PROMETHEUS | Load config
  copy:
    src: "{{ prometheus_tmp_path }}/{{ item.file }}"
    dest: "{{ prometheus_conf_path }}/{{ item.file }}"
    remote_src: yes
    owner: "{{ prometheus_user }}"
    group: "{{ prometheus_group }}"
    mode: "{{ item.mode }}"
  notify: restart prometheus
  loop:
    - { file: prometheus.yml, mode: '0640' }
    - { file: parts/, mode: '0755' }

- name: PROMETHEUS | Copy logrotate config
  template:
    src: "{{ prometheus_logrotate_template_path }}"
    dest: /etc/logrotate.d/prometheus
    mode: 0644
    owner: root
    group: root
  when: prometheus_logrotate_enabled
